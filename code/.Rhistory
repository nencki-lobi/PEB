library('dplyr')
library('tidyr')
## Load data
# Across all data sources, each participant can be uniquely identified by `token`
input1 = read.table("./S1/01/input/176496/results-survey176496.csv", header = T, sep = ",", encoding = "UTF-8") # general population dataset 1 (recruited by the company)
setwd("~/Documents/ICE/ICE-dev/S1")
library('dplyr')
library('tidyr')
## Load data
# Across all data sources, each participant can be uniquely identified by `token`
input1 = read.table("./S1/01/input/176496/results-survey176496.csv", header = T, sep = ",", encoding = "UTF-8") # general population dataset 1 (recruited by the company)
setwd("~/Documents/ICE/ICE-dev")
library('dplyr')
library('tidyr')
## Load data
# Across all data sources, each participant can be uniquely identified by `token`
input1 = read.table("./S1/01/input/176496/results-survey176496.csv", header = T, sep = ",", encoding = "UTF-8") # general population dataset 1 (recruited by the company)
input2 = read.table("./S1/01/input/381735/results-survey381735.csv", header = T, sep = ",", encoding = "UTF-8") # general population dataset 2 (recruited by the company)
input3 = read.table("./S1/01/input/977613/results-survey977613.csv", header = T, sep = ",", encoding = "UTF-8") # activists' dataset
# Remove duplicated tokens (test participants), keep the last entry
input1 = filter(input1, !duplicated(input1['token'], fromLast = T))
input2 = filter(input2, !duplicated(input2['token'], fromLast = T))
# Manually create tokens for the activists' dataset
tokens = paste(replicate(n=nrow(input3), 'activist'), as.character(1:nrow(input3)), sep="")
input3 = input3 %>% mutate(token=tokens, .after=seed)
# Merge datasets
df = rbind(input1[,c(6, 7, 14:206)], # token, timestamp, data
input2[,c(6, 7, 14:206)],
input3[,c(6, 7, 14:206)])
df = df %>% rename(ts = startdate)
save(df, file = "./S1/01/input/dataset.RData")
## Get activists' data
activists = df %>% filter(grepl("^activist", token))
## Get data needed for quality control (applicable to general population data only)
demo = c("CC5", "GENDER", "AGE") # CC concern, sex, birth
data1 = df %>% filter(!grepl("^activist", token)) %>% select("token" | "ts" | contains("CHECK") | all_of(demo))
colnames(data1) = c("token", "ts", "CHECK1", "CHECK2", "CHECK3",
"CC", "sex", "birth")
data1$age = 2021 - as.integer(data1$birth)
data1$sex = recode(data1$sex, "Kobieta" = 0, "Mężczyzna" = 1, "Inne" = 2)
data1$CC = recode(data1$CC, "W ogóle się tym nie martwię" = 0,
"Niezbyt się martwię" = 1,
"Trochę się martwię" = 2,
"Bardzo się martwię" = 3,
"Niezwykle się tym martwię" = 4)
## Get company data needed for quality control (applicable to general population data only)
recruited1 = read.table("./S1/01/input/176496/recruited.csv", skip = 1, sep = ";", encoding = "UTF-8")
recruited2 = read.table("./S1/01/input/381735/recruited.csv", skip = 1, sep = ";", encoding = "UTF-8")
data2 = rbind(recruited1, recruited2)
data2 = data2[,c(3,12,4,6)]
colnames(data2) = c("token", "CC", "sex", "age")
## Remove test data
data = data1 %>%
inner_join(data2, by = "token", suffix=c(".1",".2"))
sprintf('Initial sample size: N = %d', nrow(data)+nrow(activists)) # initial sample size
## Clean data based on quality criteria (applicable to general population data only)
# consistent reporting on sex
data = data %>% mutate(sex.matches = (sex.1 + 1 == sex.2))
# consistent reporting on age, with difference of 1 year acceptable
data = data %>%
mutate(age.matches = case_when(age.2 == 2 & age.1 >= 18 & age.1 <= 24 ~ TRUE,
age.2 == 3 & age.1 >= 23 & age.1 <= 36 ~ TRUE,
age.2 == 4 & age.1 >= 35 & age.1 <= 56 ~ TRUE,
age.2 == 5 & age.1 >= 55 & age.1 <= 73 ~ TRUE,
TRUE ~ FALSE))
# consistent reporting on CC concern, with difference by no more than 1 point acceptable
data = data %>% mutate(CC.matches = (abs(CC.1 + 1 - CC.2) < 2))
# correct responses to control questions
data = data %>% mutate(acceptable.checks = ((CHECK1 == "Zdecydowanie nie") +
(CHECK2 == "Zdecydowanie tak") +
(CHECK3 == "Ani tak, ani nie") > 2))
View(data)
data = filter(data, sex.matches == TRUE )
data = filter(data, sex.matches == TRUE
& age.matches  == TRUE)
library('dplyr')
library('tidyr')
## Load data
# Across all data sources, each participant can be uniquely identified by `token`
input1 = read.table("./S1/01/input/176496/results-survey176496.csv", header = T, sep = ",", encoding = "UTF-8") # general population dataset 1 (recruited by the company)
input2 = read.table("./S1/01/input/381735/results-survey381735.csv", header = T, sep = ",", encoding = "UTF-8") # general population dataset 2 (recruited by the company)
input3 = read.table("./S1/01/input/977613/results-survey977613.csv", header = T, sep = ",", encoding = "UTF-8") # activists' dataset
# Remove duplicated tokens (test participants), keep the last entry
input1 = filter(input1, !duplicated(input1['token'], fromLast = T))
input2 = filter(input2, !duplicated(input2['token'], fromLast = T))
# Manually create tokens for the activists' dataset
tokens = paste(replicate(n=nrow(input3), 'activist'), as.character(1:nrow(input3)), sep="")
input3 = input3 %>% mutate(token=tokens, .after=seed)
# Merge datasets
df = rbind(input1[,c(6, 7, 14:206)], # token, timestamp, data
input2[,c(6, 7, 14:206)],
input3[,c(6, 7, 14:206)])
df = df %>% rename(ts = startdate)
save(df, file = "./S1/01/input/dataset.RData")
## Get activists' data
activists = df %>% filter(grepl("^activist", token))
## Get data needed for quality control (applicable to general population data only)
demo = c("CC5", "GENDER", "AGE") # CC concern, sex, birth
data1 = df %>% filter(!grepl("^activist", token)) %>% select("token" | "ts" | contains("CHECK") | all_of(demo))
colnames(data1) = c("token", "ts", "CHECK1", "CHECK2", "CHECK3",
"CC", "sex", "birth")
data1$age = 2021 - as.integer(data1$birth)
data1$sex = recode(data1$sex, "Kobieta" = 0, "Mężczyzna" = 1, "Inne" = 2)
data1$CC = recode(data1$CC, "W ogóle się tym nie martwię" = 0,
"Niezbyt się martwię" = 1,
"Trochę się martwię" = 2,
"Bardzo się martwię" = 3,
"Niezwykle się tym martwię" = 4)
## Get company data needed for quality control (applicable to general population data only)
recruited1 = read.table("./S1/01/input/176496/recruited.csv", skip = 1, sep = ";", encoding = "UTF-8")
recruited2 = read.table("./S1/01/input/381735/recruited.csv", skip = 1, sep = ";", encoding = "UTF-8")
data2 = rbind(recruited1, recruited2)
data2 = data2[,c(3,12,4,6)]
colnames(data2) = c("token", "CC", "sex", "age")
## Remove test data
data = data1 %>%
inner_join(data2, by = "token", suffix=c(".1",".2"))
sprintf('Initial sample size: N = %d', nrow(data)+nrow(activists)) # initial sample size
## Clean data based on quality criteria (applicable to general population data only)
# consistent reporting on sex
data = data %>% mutate(sex.matches = (sex.1 + 1 == sex.2))
# consistent reporting on age, with difference of 1 year acceptable
data = data %>%
mutate(age.matches = case_when(age.2 == 2 & age.1 >= 18 & age.1 <= 24 ~ TRUE,
age.2 == 3 & age.1 >= 23 & age.1 <= 36 ~ TRUE,
age.2 == 4 & age.1 >= 35 & age.1 <= 56 ~ TRUE,
age.2 == 5 & age.1 >= 55 & age.1 <= 73 ~ TRUE,
TRUE ~ FALSE))
# consistent reporting on CC concern, with difference by no more than 1 point acceptable
data = data %>% mutate(CC.matches = (abs(CC.1 + 1 - CC.2) < 2))
# correct responses to control questions
data = data %>% mutate(acceptable.checks = ((CHECK1 == "Zdecydowanie nie") +
(CHECK2 == "Zdecydowanie tak") +
(CHECK3 == "Ani tak, ani nie") > 2))
View(data)
table(data$sex.matches)
table(data$age.matches)
table(data$CC.matches)
table(data$acceptable.checks)
# library('RPostgreSQL')
library('dplyr')
library('tidyr')
## Connect to database
# pg = dbDriver("PostgreSQL")
#
# con = dbConnect(pg, user="grieg", password="",
#                 host="localhost", port=5432, dbname="grieg")
## Load data
# query = "SELECT
# s.sid, s.code, e.respondent_id AS rid,
# q.name, a.ord, a.val
# FROM subject s
# JOIN external_arc e ON e.sid = s.sid
# JOIN quest q ON q.sid = s.sid
# JOIN answer a ON a.qid = q.qid
# WHERE s.stid = 3 AND s.qidv_idx > 14
# AND q.name IN ('demo-0-pl', 'ICE-60-pl')
# ORDER BY s.sid, q.name, a.ord"
#
# df = dbGetQuery(con, query)
# save(df, file = "./S2/01/input/dataset.RData")
load(file = "./S2/01/input/dataset.RData")
## Get data needed for quality control
demo = c(0,1,3,4:6) # CC concern, sex, birth, country, languages
checks = c(19,34,44) # CHECK questions
data1 = filter(df, (name == 'demo-0-pl' & ord %in% demo) |
(name == 'ICE-60-pl' & ord %in% checks))
data1 = select(data1, sid, code, rid, name, ord, val) %>%
pivot_wider(id_cols = c("sid", "code", "rid"),
names_from = c("name", "ord"),
names_sep = ".",
values_from = "val")
colnames(data1) = c("sid", "code", "rid", "CHECK1", "CHECK2", "CHECK3",
"CC", "sex", "birth", "country", "language1", "language2")
data1 = data1 %>% mutate(across(4:9, as.integer))
data1$age = 2022 - data1$birth
## Get company data needed for quality control
data2 = read.table("./S2/01/input/recruited.csv", header = T, sep = ",", encoding = "UTF-8")
data2 = data2[,c(3,12,4,6)]
colnames(data2) = c("rid", "CC", "sex", "age")
data2$rid = as.character(data2$rid)
## Remove test data
data = data1 %>%
inner_join(data2, by = "rid", suffix=c(".1",".2"))
sprintf('Final sample size: N = %d', nrow(data)) # initial sample size
## Clean data based on quality criteria
# country & languages
data = data %>% filter(country == "Polska")
data = data %>% filter(language1 == "Polski" | language2 == "Polski")
# consistent reporting on sex
data = data %>% mutate(sex.matches = (sex.1 + 1 == sex.2))
# consistent reporting on age, with difference of 1 year acceptable
data = data %>%
mutate(age.matches = case_when(age.2 == 2 & age.1 >= 18 & age.1 <= 24 ~ TRUE,
age.2 == 3 & age.1 >= 23 & age.1 <= 36 ~ TRUE,
age.2 == 4 & age.1 >= 35 & age.1 <= 56 ~ TRUE,
age.2 == 5 & age.1 >= 55 & age.1 <= 73 ~ TRUE,
TRUE ~ FALSE))
# consistent reporting on CC concern, with difference of up to 2 points acceptable
data = data %>% mutate(CC.matches = (abs(CC.1 + 1 - CC.2) < 3))
# correct responses to control questions
data = data %>% mutate(acceptable.checks = ((CHECK1 == 0) + (CHECK2 == 2) + (CHECK3 == 4) > 2))
table(data$sex.matches)
table(data$age.matches)
table(data$acceptable.checks)
table(data$CC.matches)
setwd("~/Documents/PEB")
View(input2)
donations = read.table("/Users/dominikazaremba/Documents/PEB/data/S1/peb-cond-weptings.csv", header = F, sep = ",", quote = "", encoding = "UTF-8")
colnames(items) = c("sid", "stid", "category", "ord","mh","fh")
colnames(donations) = c("sid", "stid", "category", "ord","mh","fh")
View(donations)
donations = read.table("/Users/dominikazaremba/Documents/PEB/data/S1/peb-cond-weptings.csv", header = F, sep = "|", quote = "", encoding = "UTF-8")
donations = read.table("/Users/dominikazaremba/Documents/PEB/data/S1/peb-cond-weptings.csv", header = F, sep = "|", quote = "", encoding = "UTF-8")
items = read.table("./data/rtask-items.tsv", header = F, sep = "\t", quote = "", encoding = "UTF-8")
donations = read.table("/Users/dominikazaremba/Documents/PEB/data/S1/peb-cond-weptings.csv", header = F, sep = "|", quote = "", encoding = "UTF-8")
setwd("~/Documents/PEB")
donations = read.table("./data/S1/peb-cond-weptings.csv", header = T, sep = "|", quote = "", encoding = "UTF-8")
?read.table
library(readr)
peb_cond_weptings <- read_delim("data/S1/peb-cond-weptings.csv",
delim = "|", escape_double = FALSE, trim_ws = TRUE)
View(peb_cond_weptings)
library(readr)
peb_cond_weptings <- read_delim("data/S1/peb-cond-weptings.csv",
delim = "|", escape_double = FALSE, trim_ws = TRUE)
View(peb_cond_weptings)
donations = read_delim("data/S1/peb-cond-weptings.csv",
+     delim = "|", escape_double = FALSE, trim_ws = TRUE)
setwd("~/Documents/PEB")
donations = read.table("./peb-donations.tsv", header = F, skip = 2, sep = "|", encoding = "UTF-8")
setwd("~/Documents/PEB/code")
colnames(donations) = c("sid", "code", "stid", "name", "ord","val")
donations = read.table("./data/S1/peb-donations.tsv", header = F, skip = 2, sep = "|", encoding = "UTF-8")
colnames(donations) = c("sid", "code", "stid", "name", "ord","val")
donations = read.table("./data/S1/peb-donations.tsv", header = F, skip = 2, sep = "|", encoding = "UTF-8")
donations = read.table("/Users/dominikazaremba/Documents/PEB/data/S1/peb-donations.tsv", header = F, skip = 2, sep = "|", encoding = "UTF-8")
colnames(donations) = c("sid", "code", "stid", "name", "ord","val")
weptings = read.table("/Users/dominikazaremba/Documents/PEB/data/S1/peb-cond-weptings.tsv", header = F, skip = 2, sep = "|", strip.white = T, encoding = "UTF-8")
colnames(weptings) = c("sid", "stid", "category", "ord", "mh", "fh")
weptings_transposed = weptings  %>%
mutate(wept = mh + fh < 5) %>%
group_by(sid, stid, category) %>%
summarise(wept = n())
weptings_transposed = weptings
weptings_transposed = weptings  %>%
mutate(wept = mh + fh < 5)
library('dplr')
library('dplyr')
weptings_transposed = weptings  %>%
mutate(wept = mh + fh < 5) %>%
group_by(sid, stid, category) %>%
summarise(wept = n())
pebs = full_join(weptings_transposed, donations, by = "sid") %>%
select("sid", "category", "wept", "val") %>%
rename("donation" = "val") %>%
filter(!is.na(category)) %>%
group_by(category)
table(pebs$category)
anova_result = aov(donation ~ category, data = pebs)
summary(anova_result)
anova_result = aov(wept ~ category, data = pebs)
summary(anova_result)
ggplot(pebs, aes(x=category, y=donation, fill=category)) +
geom_boxplot(notch = TRUE) +
xlab("Category") + ylab("Donation")
library('ggplot2')
ggplot(pebs, aes(x=category, y=donation, fill=category)) +
geom_boxplot(notch = TRUE) +
xlab("Category") + ylab("Donation")
ggplot(pebs, aes(x=category, y=wept, fill=category)) +
geom_boxplot(notch = TRUE) +
xlab("Category") + ylab("Completed WEPT pages")
